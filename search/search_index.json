{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Index Page","text":"<p>This site contains the project documentation for the <code>odooaiorpc</code> project.</p>"},{"location":"index.html#table-of-contents","title":"Table Of Contents","text":"<p>The documentation follows the best practice for project documentation as described by Daniele Procida in the Di\u00e1taxis documentation framework and consists of four separate parts:</p> <ol> <li>Tutorials</li> <li>How-To Guides</li> <li>Reference</li> <li>Explanation</li> </ol> <p>Quickly find what you're looking for depending on your use case by looking at the different pages.</p>"},{"location":"index.html#project-overview","title":"Project Overview","text":"<p>OdooAioRPC is an aync Odoo remote procedure call</p>"},{"location":"index.html#odooaiorpc.OdooAioRPC","title":"<code>OdooAioRPC</code>","text":"Source code in <code>odooaiorpc/client.py</code> <pre><code>class OdooAioRPC:\n    def __init__(\n        self,\n        url: t.Union[str, AnyUrl],\n        database: str,\n        user: str,\n        secret: str,\n        protocol: const.Protocol = const.Protocol.jsonrpc,\n        auth: t.Optional[AuthTypes] = None,\n        headers: t.Optional[HeaderTypes] = None,\n        context: t.Optional[VerifyTypes] = None,\n        timeout: TimeoutTypes = 5.0,\n        transport: t.Optional[BaseProtocol] = None,\n    ) -&gt; None:\n\"\"\"\n        Initialize OdooAioRPC client\n\n        Args:\n            url (t.Union[str, AnyUrl]): Odoo http URL\n            database (str): Odoo database\n            user (str): Odoo user to connect with\n            secret (str): Odoo user generated api key or password (discouraged)\n            protocol (const.Protocol, optional): Communication protocol. Defaults to const.Protocol.jsonrpc.\n            auth (t.Optional[AuthTypes], optional): Auth options. Defaults to None.\n            headers (t.Optional[HeaderTypes], optional): Custom http headers. Defaults to None.\n            context (t.Optional[VerifyTypes], optional): SSL context. Defaults to None.\n            timeout (TimeoutTypes, optional): Connection timeout. Defaults to 5.0.\n            transport (t.Optional[BaseProtocol], optional): _description_. Defaults to None.\n        \"\"\"\n        self._url = url\n        self._database = database\n        self._user = user\n        self._secret = secret\n        self._uid: t.Optional[int] = None\n        self._common_proxy: t.Optional[CommonDomain] = None\n        self._object_proxy: t.Optional[ModelDomain] = None\n        self._db_proxy: t.Optional[DBDomain] = None\n\n        if transport:\n            self._transport = transport\n        else:\n            self._transport = pick_preferred_protocol(protocol=protocol)(\n                url=url,\n                auth=auth,\n                headers=headers,\n                context=context,\n                timeout=timeout,\n            )\n\n    @staticmethod\n    def get_protocol_from_settings(settings: OdooSettings) -&gt; BaseProtocol:\n\"\"\"\n        Get configured protocol class from OdooSettings\n\n        Args:\n            settings (OdooSettings): settings to get config from\n\n        Returns:\n            BaseProtocol: Protocol instance\n        \"\"\"\n        return pick_preferred_protocol(protocol=settings.protocol).from_settings(\n            settings=settings\n        )\n\n    @classmethod\n    def from_settings(cls, settings: OdooSettings) -&gt; \"OdooAioRPC\":\n\"\"\"\n        Initialize OdooAioRPC client from OdooSettings\n\n        Args:\n            settings (OdooSettings): settings\n\n        Returns:\n            OdooAioRPC: RPC client instance\n        \"\"\"\n        return cls(\n            url=settings.url,\n            database=t.cast(str, settings.database),\n            user=settings.user,\n            secret=settings.secret,\n            protocol=settings.protocol,\n            auth=settings.auth,\n            headers=settings.headers,\n            context=settings.context,\n            timeout=settings.timeout,\n        )\n\n    async def authenticate(self) -&gt; t.Optional[int]:\n\"\"\"\n        Authenticate configured user with Odoo\n        Return uid if auth process success\n\n        Returns:\n            t.Optional[int]: User uid\n        \"\"\"\n        uid = await self.common.authenticate(\n            self._database, self._user, self._secret, {}\n        )\n        if uid:\n            self._uid = uid\n        return uid\n\n    async def version(self) -&gt; dict:\n\"\"\"\n        Return Odoo server version informations\n\n        Returns:\n            dict: Version infos\n        \"\"\"\n        return await self.common.version()\n\n    @property\n    def is_auth(self) -&gt; bool:\n\"\"\"\n        Check if auth has been done\n\n        Returns:\n            bool: auth state\n        \"\"\"\n        return self._uid is not None\n\n    @property\n    def common(self) -&gt; CommonDomain:\n\"\"\"\n        Return common RPC domain\n        Initialize if not already done\n\n        Returns:\n            CommonDomain: Common RPC domain\n        \"\"\"\n        if self._common_proxy is None:\n            self._common_proxy = CommonDomain(transport=self._transport)\n        return t.cast(CommonDomain, self._common_proxy)\n\n    @property\n    def models(self) -&gt; ModelDomain:\n\"\"\"\n        Return object/models RPC domain\n        Initialize if not already done\n\n        Returns:\n            ModelDomain: Object RPC domain\n        \"\"\"\n        if self._object_proxy is None:\n            self._object_proxy = ModelDomain(transport=self._transport)\n        return t.cast(ModelDomain, self._object_proxy)\n\n    @property\n    def db(self) -&gt; DBDomain:\n\"\"\"\n        Return db RPC domain\n        Initialize if not already done\n\n        Returns:\n            DBDomain: DB RPC domain\n        \"\"\"\n        if self._db_proxy is None:\n            self._db_proxy = DBDomain(transport=self._transport)\n        return t.cast(DBDomain, self._db_proxy)\n</code></pre>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.common","title":"<code>common: CommonDomain</code>  <code>property</code>","text":"<p>Return common RPC domain Initialize if not already done</p> <p>Returns:</p> Name Type Description <code>CommonDomain</code> <code>CommonDomain</code> <p>Common RPC domain</p>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.db","title":"<code>db: DBDomain</code>  <code>property</code>","text":"<p>Return db RPC domain Initialize if not already done</p> <p>Returns:</p> Name Type Description <code>DBDomain</code> <code>DBDomain</code> <p>DB RPC domain</p>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.is_auth","title":"<code>is_auth: bool</code>  <code>property</code>","text":"<p>Check if auth has been done</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>auth state</p>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.models","title":"<code>models: ModelDomain</code>  <code>property</code>","text":"<p>Return object/models RPC domain Initialize if not already done</p> <p>Returns:</p> Name Type Description <code>ModelDomain</code> <code>ModelDomain</code> <p>Object RPC domain</p>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.__init__","title":"<code>__init__(url, database, user, secret, protocol=const.Protocol.jsonrpc, auth=None, headers=None, context=None, timeout=5.0, transport=None)</code>","text":"<p>Initialize OdooAioRPC client</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>t.Union[str, AnyUrl]</code> <p>Odoo http URL</p> required <code>database</code> <code>str</code> <p>Odoo database</p> required <code>user</code> <code>str</code> <p>Odoo user to connect with</p> required <code>secret</code> <code>str</code> <p>Odoo user generated api key or password (discouraged)</p> required <code>protocol</code> <code>const.Protocol</code> <p>Communication protocol. Defaults to const.Protocol.jsonrpc.</p> <code>const.Protocol.jsonrpc</code> <code>auth</code> <code>t.Optional[AuthTypes]</code> <p>Auth options. Defaults to None.</p> <code>None</code> <code>headers</code> <code>t.Optional[HeaderTypes]</code> <p>Custom http headers. Defaults to None.</p> <code>None</code> <code>context</code> <code>t.Optional[VerifyTypes]</code> <p>SSL context. Defaults to None.</p> <code>None</code> <code>timeout</code> <code>TimeoutTypes</code> <p>Connection timeout. Defaults to 5.0.</p> <code>5.0</code> <code>transport</code> <code>t.Optional[BaseProtocol]</code> <p>description. Defaults to None.</p> <code>None</code> Source code in <code>odooaiorpc/client.py</code> <pre><code>def __init__(\n    self,\n    url: t.Union[str, AnyUrl],\n    database: str,\n    user: str,\n    secret: str,\n    protocol: const.Protocol = const.Protocol.jsonrpc,\n    auth: t.Optional[AuthTypes] = None,\n    headers: t.Optional[HeaderTypes] = None,\n    context: t.Optional[VerifyTypes] = None,\n    timeout: TimeoutTypes = 5.0,\n    transport: t.Optional[BaseProtocol] = None,\n) -&gt; None:\n\"\"\"\n    Initialize OdooAioRPC client\n\n    Args:\n        url (t.Union[str, AnyUrl]): Odoo http URL\n        database (str): Odoo database\n        user (str): Odoo user to connect with\n        secret (str): Odoo user generated api key or password (discouraged)\n        protocol (const.Protocol, optional): Communication protocol. Defaults to const.Protocol.jsonrpc.\n        auth (t.Optional[AuthTypes], optional): Auth options. Defaults to None.\n        headers (t.Optional[HeaderTypes], optional): Custom http headers. Defaults to None.\n        context (t.Optional[VerifyTypes], optional): SSL context. Defaults to None.\n        timeout (TimeoutTypes, optional): Connection timeout. Defaults to 5.0.\n        transport (t.Optional[BaseProtocol], optional): _description_. Defaults to None.\n    \"\"\"\n    self._url = url\n    self._database = database\n    self._user = user\n    self._secret = secret\n    self._uid: t.Optional[int] = None\n    self._common_proxy: t.Optional[CommonDomain] = None\n    self._object_proxy: t.Optional[ModelDomain] = None\n    self._db_proxy: t.Optional[DBDomain] = None\n\n    if transport:\n        self._transport = transport\n    else:\n        self._transport = pick_preferred_protocol(protocol=protocol)(\n            url=url,\n            auth=auth,\n            headers=headers,\n            context=context,\n            timeout=timeout,\n        )\n</code></pre>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.authenticate","title":"<code>authenticate()</code>  <code>async</code>","text":"<p>Authenticate configured user with Odoo Return uid if auth process success</p> <p>Returns:</p> Type Description <code>t.Optional[int]</code> <p>t.Optional[int]: User uid</p> Source code in <code>odooaiorpc/client.py</code> <pre><code>async def authenticate(self) -&gt; t.Optional[int]:\n\"\"\"\n    Authenticate configured user with Odoo\n    Return uid if auth process success\n\n    Returns:\n        t.Optional[int]: User uid\n    \"\"\"\n    uid = await self.common.authenticate(\n        self._database, self._user, self._secret, {}\n    )\n    if uid:\n        self._uid = uid\n    return uid\n</code></pre>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.from_settings","title":"<code>from_settings(settings)</code>  <code>classmethod</code>","text":"<p>Initialize OdooAioRPC client from OdooSettings</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>OdooSettings</code> <p>settings</p> required <p>Returns:</p> Name Type Description <code>OdooAioRPC</code> <code>OdooAioRPC</code> <p>RPC client instance</p> Source code in <code>odooaiorpc/client.py</code> <pre><code>@classmethod\ndef from_settings(cls, settings: OdooSettings) -&gt; \"OdooAioRPC\":\n\"\"\"\n    Initialize OdooAioRPC client from OdooSettings\n\n    Args:\n        settings (OdooSettings): settings\n\n    Returns:\n        OdooAioRPC: RPC client instance\n    \"\"\"\n    return cls(\n        url=settings.url,\n        database=t.cast(str, settings.database),\n        user=settings.user,\n        secret=settings.secret,\n        protocol=settings.protocol,\n        auth=settings.auth,\n        headers=settings.headers,\n        context=settings.context,\n        timeout=settings.timeout,\n    )\n</code></pre>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.get_protocol_from_settings","title":"<code>get_protocol_from_settings(settings)</code>  <code>staticmethod</code>","text":"<p>Get configured protocol class from OdooSettings</p> <p>Parameters:</p> Name Type Description Default <code>settings</code> <code>OdooSettings</code> <p>settings to get config from</p> required <p>Returns:</p> Name Type Description <code>BaseProtocol</code> <code>BaseProtocol</code> <p>Protocol instance</p> Source code in <code>odooaiorpc/client.py</code> <pre><code>@staticmethod\ndef get_protocol_from_settings(settings: OdooSettings) -&gt; BaseProtocol:\n\"\"\"\n    Get configured protocol class from OdooSettings\n\n    Args:\n        settings (OdooSettings): settings to get config from\n\n    Returns:\n        BaseProtocol: Protocol instance\n    \"\"\"\n    return pick_preferred_protocol(protocol=settings.protocol).from_settings(\n        settings=settings\n    )\n</code></pre>"},{"location":"index.html#odooaiorpc.client.OdooAioRPC.version","title":"<code>version()</code>  <code>async</code>","text":"<p>Return Odoo server version informations</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>Version infos</p> Source code in <code>odooaiorpc/client.py</code> <pre><code>async def version(self) -&gt; dict:\n\"\"\"\n    Return Odoo server version informations\n\n    Returns:\n        dict: Version infos\n    \"\"\"\n    return await self.common.version()\n</code></pre>"},{"location":"index.html#odooaiorpc.OdooSettings","title":"<code>OdooSettings</code>","text":"<p>         Bases: <code>BaseSettings</code></p> <p>Odoo client configuration settings</p> Source code in <code>odooaiorpc/config.py</code> <pre><code>class OdooSettings(BaseSettings):\n\"\"\"\n    Odoo client configuration settings\n    \"\"\"\n\n    class Config:\n        env_prefix = \"ODOO_AIO_\"\n        env_file = \".env\"\n        env_file_encoding = \"utf-8\"\n\n    url: AnyUrl\n\"\"\"\n    Odoo url\n    \"\"\"\n    database: t.Optional[str] = None\n\"\"\"\n    Odoo database\n    \"\"\"\n    user: str\n\"\"\"\n    Odoo user\n    \"\"\"\n    secret: str\n\"\"\"\n    Odoo user API key\n    \"\"\"\n    protocol: const.Protocol = const.Protocol.jsonrpc\n\"\"\"\n    RPC protocol used to communicate. Default to jsonrpc\n    \"\"\"\n    auth: t.Optional[AuthTypes] = None\n    headers: t.Optional[HeaderTypes] = None\n    context: t.Optional[VerifyTypes] = None\n    timeout: TimeoutTypes = 5.0\n\n    @validator(\"database\", pre=True, always=True)\n    def extract_db_name(cls, v, values, **kwargs):\n\"\"\"\n        Extract database name from url if not specified\n        \"\"\"\n        if v is None and \"url\" in values:\n            parsed_url = urlparse(values[\"url\"])\n            return parsed_url.hostname.split(\".\")[0]\n        return v\n</code></pre>"},{"location":"index.html#odooaiorpc.config.OdooSettings.database","title":"<code>database: t.Optional[str] = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Odoo database</p>"},{"location":"index.html#odooaiorpc.config.OdooSettings.protocol","title":"<code>protocol: const.Protocol = const.Protocol.jsonrpc</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>RPC protocol used to communicate. Default to jsonrpc</p>"},{"location":"index.html#odooaiorpc.config.OdooSettings.secret","title":"<code>secret: str</code>  <code>instance-attribute</code>","text":"<p>Odoo user API key</p>"},{"location":"index.html#odooaiorpc.config.OdooSettings.url","title":"<code>url: AnyUrl</code>  <code>instance-attribute</code>","text":"<p>Odoo url</p>"},{"location":"index.html#odooaiorpc.config.OdooSettings.user","title":"<code>user: str</code>  <code>instance-attribute</code>","text":"<p>Odoo user</p>"},{"location":"index.html#odooaiorpc.config.OdooSettings.extract_db_name","title":"<code>extract_db_name(v, values, **kwargs)</code>","text":"<p>Extract database name from url if not specified</p> Source code in <code>odooaiorpc/config.py</code> <pre><code>@validator(\"database\", pre=True, always=True)\ndef extract_db_name(cls, v, values, **kwargs):\n\"\"\"\n    Extract database name from url if not specified\n    \"\"\"\n    if v is None and \"url\" in values:\n        parsed_url = urlparse(values[\"url\"])\n        return parsed_url.hostname.split(\".\")[0]\n    return v\n</code></pre>"},{"location":"explanation.html","title":"Explanation","text":"<p>This part of the project documentation focuses on an understanding-oriented approach. You'll get a chance to read about the background of the project, as well as reasoning about how it was implemented.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Give context and background on your library</li> <li>Explain why you created it</li> <li>Provide multiple examples and approaches of how     to work with it</li> <li>Help the reader make connections</li> <li>Avoid writing instructions or technical descriptions     here</li> </ul>"},{"location":"how-to-guides.html","title":"How-To-Guides","text":"<p>This part of the project documentation focuses on a problem-oriented approach. You'll tackle common tasks that you might have, with the help of the code provided in this project.</p>"},{"location":"tutorials.html","title":"Tutorials","text":"<p>This part of the project documentation focuses on a learning-oriented approach. You'll learn how to get started with the code in this project.</p> <p>Note: Expand this section by considering the following points:</p> <ul> <li>Help newcomers with getting started</li> <li>Teach readers about your library by making them     write code</li> <li>Inspire confidence through examples that work for     everyone, repeatably</li> <li>Give readers an immediate sense of achievement</li> <li>Show concrete examples, no abstractions</li> <li>Provide the minimum necessary explanation</li> <li>Avoid any distractions</li> </ul>"}]}